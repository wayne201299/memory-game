{"version":3,"sources":["index.js"],"names":["cardArray_init","Card","className","onClick","this","props","value","React","Component","Game","state","fstVal","secVal","pre_pos","cardArray","shuffle","concat","flipArray","Array","fill","val","index","showVal","handleClick","i","flipArray_tmp","slice","fstVal_tmp","secVal_tmp","pre_pos_tmp","current","console","log","alert","setState","map","card","renderCard","array","arr_tmp","length","j","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"mNAIMA,G,MAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKrDC,E,uKAGE,OACI,qBAAKC,UAAU,OACXC,QAASC,KAAKC,MAAMF,QADxB,SAEKC,KAAKC,MAAMC,Y,GANTC,IAAMC,WAYnBC,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CAETC,OAAQ,KAERC,OAAQ,KAERC,QAAS,KAETC,UAAWC,EAAQf,EAAegB,OAAOhB,IAEzCiB,UAAWC,MAAM,IAAIC,MAAK,IAZf,E,uDAoBRC,EAAKC,GAAQ,IAAD,OACfC,EAAU,OAId,OAHIlB,KAAKM,MAAMO,UAAUI,KACrBC,EAAUF,GAEN,cAACnB,EAAD,CACJK,MAAOgB,EACPnB,QAAS,kBAAM,EAAKoB,YAAYF,Q,kCAG5BG,GACR,IAAMC,EAAgBrB,KAAKM,MAAMO,UAAUS,QACvCC,EAAavB,KAAKM,MAAMC,OACxBiB,EAAaxB,KAAKM,MAAME,OACxBiB,EAAczB,KAAKM,MAAMG,QACvBiB,EAAU1B,KAAKM,MAAMI,UAAUU,GAErCO,QAAQC,IAAIP,GACPA,EAAcD,KACfC,EAAcD,IAAK,EAKlBG,GAOGA,KAFJC,EAAaE,GAITG,MAAM,WAENA,MAAM,SACNR,EAAcrB,KAAKM,MAAMG,UAAW,EACpCY,EAAcD,IAAK,GAEvBK,EAAc,KACdF,EAAa,KACbC,EAAa,OAhBbD,EAAaG,EACbD,EAAcL,GAmBlBpB,KAAK8B,SAAS,CACVvB,OAAQgB,EACRf,OAAQgB,EACRf,QAASgB,EACTf,UAAWV,KAAKM,MAAMI,UACtBG,UAAWQ,O,+BAGT,IAAD,OACL,OACI,sBAAKvB,UAAU,OAAf,UACI,2CAAQ,SACR,qBAAKA,UAAU,iBAAf,SACKE,KAAKM,MAAMI,UAAUqB,KAAI,SAACC,EAAMf,GAC7B,OAAO,EAAKgB,WAAWD,EAAMf,QAGrC,wBAAQnB,UAAU,QAAQC,QAAS,WAC/B,EAAK+B,SAAS,CACVvB,OAAQ,KACRC,OAAQ,KACRC,QAAS,KACTC,UAAWC,EAAQf,EAAegB,OAAOhB,IACzCiB,UAAWC,MAAM,IAAIC,MAAK,MANlC,0B,GAnFGZ,IAAMC,WAoGzB,SAASO,EAAQuB,GAEb,IADA,IAAIC,EAAUD,EACLd,EAAIe,EAAQC,OAAS,EAAGhB,EAAI,EAAGA,IAAK,CACzC,IAAIiB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYpB,EAAI,IADC,EAEd,CAACe,EAAQE,GAAIF,EAAQf,IAA/Ce,EAAQf,GAFgC,KAE5Be,EAAQE,GAFoB,KAI7C,OAAOF,EAOXM,IAASC,OACL,cAACrC,EAAD,IACAsC,SAASC,eAAe,W","file":"static/js/main.e6d7fd92.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst cardArray_init = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n\r\n/**\r\n * @description 每張牌，component中最小單位\r\n */\r\nclass Card extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='card'\r\n                onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // 第一比對值\r\n            fstVal: null,\r\n            // 第二比對值\r\n            secVal: null,\r\n            // 用來記錄第一個翻的牌位置，以便翻第二張牌時可以改前一張牌的狀態\r\n            pre_pos: null,\r\n            // 紀錄所有卡片背後所存的值\r\n            cardArray: shuffle(cardArray_init.concat(cardArray_init)),\r\n            // 一開始預設所有卡片都是蓋上的(蓋false翻true)\r\n            flipArray: Array(16).fill(false),\r\n        }\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} val 要塞的值\r\n     * @param {*} index 第幾個位置\r\n     */\r\n    renderCard(val, index) {\r\n        let showVal = 'Back';\r\n        if (this.state.flipArray[index]) {\r\n            showVal = val;\r\n        }\r\n        return (<Card\r\n            value={showVal}\r\n            onClick={() => this.handleClick(index)} />);\r\n\r\n    }\r\n    handleClick(i) {\r\n        const flipArray_tmp = this.state.flipArray.slice();\r\n        let fstVal_tmp = this.state.fstVal;\r\n        let secVal_tmp = this.state.secVal;\r\n        let pre_pos_tmp = this.state.pre_pos;\r\n        const current = this.state.cardArray[i];\r\n        // 記錄每張牌是蓋上或翻開\r\n        console.log(flipArray_tmp);\r\n        if (!flipArray_tmp[i]) {\r\n            flipArray_tmp[i] = true;\r\n        } else {\r\n            return;\r\n        }\r\n        // 如果是第一次翻，要把位置記錄下來\r\n        if (!fstVal_tmp) {\r\n            fstVal_tmp = current;\r\n            pre_pos_tmp = i;\r\n        } else {\r\n            // second time\r\n            secVal_tmp = current;\r\n            // 第一跟第二個值比對成功的話，要留在場上，反之則兩張都蓋起來\r\n            if (fstVal_tmp === secVal_tmp) {\r\n                // TODO:比對成功要做的事?\r\n                alert('Match!')\r\n            } else {\r\n                alert('FAIL!')\r\n                flipArray_tmp[this.state.pre_pos] = false;\r\n                flipArray_tmp[i] = false;\r\n            }\r\n            pre_pos_tmp = null;\r\n            fstVal_tmp = null;\r\n            secVal_tmp = null;\r\n        }\r\n\r\n        // alert('fst:' + fstVal_tmp + ' ,2nd:' + secVal_tmp + ' ,position:' + pre_pos_tmp)\r\n        this.setState({\r\n            fstVal: fstVal_tmp,\r\n            secVal: secVal_tmp,\r\n            pre_pos: pre_pos_tmp,\r\n            cardArray: this.state.cardArray,\r\n            flipArray: flipArray_tmp,\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='game'>\r\n                <h1 key='title'>MemoryGame</h1>\r\n                <div className='grid-container'>\r\n                    {this.state.cardArray.map((card, index) => {\r\n                        return this.renderCard(card, index)\r\n                    })}\r\n                </div>\r\n                <button className='reset' onClick={() => {\r\n                    this.setState({\r\n                        fstVal: null,\r\n                        secVal: null,\r\n                        pre_pos: null,\r\n                        cardArray: shuffle(cardArray_init.concat(cardArray_init)),\r\n                        flipArray: Array(16).fill(false),\r\n                    })\r\n                }}>Reset</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/**\r\n * @description 洗牌\r\n * @param {*} array \r\n */\r\nfunction shuffle(array) {\r\n    let arr_tmp = array;\r\n    for (let i = arr_tmp.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [arr_tmp[i], arr_tmp[j]] = [arr_tmp[j], arr_tmp[i]];\r\n    }\r\n    return arr_tmp;\r\n}\r\n\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}