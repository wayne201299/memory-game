{"version":3,"sources":["index.js"],"names":["cardArray_init","Card","className","onClick","this","props","value","React","Component","Game","state","fstVal","pre_pos","cardArray","shuffle","concat","flipArray","Array","fill","val","index","showVal","handleClick","i","flipArray_tmp","slice","fstVal_tmp","pre_pos_tmp","currentVal","flipCard","console","log","isFinish","window","confirm","reset","setState","unflipCard","prePos","currenPos","tmpArr","setTimeout","some","e","secVal","map","card","renderCard","array","arr_tmp","length","j","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"mNAIMA,G,MAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKrDC,E,uKAGE,OACI,qBAAKC,UAAU,OACXC,QAASC,KAAKC,MAAMF,QADxB,SAEKC,KAAKC,MAAMC,Y,GANTC,IAAMC,WAYnBC,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CAETC,OAAQ,KAERC,QAAS,KAETC,UAAWC,EAAQd,EAAee,OAAOf,IAEzCgB,UAAWC,MAAM,IAAIC,MAAK,IAVf,E,uDAkBRC,EAAKC,GAAQ,IAAD,OACfC,EAAU,OAId,OAHIjB,KAAKM,MAAMM,UAAUI,KACrBC,EAAUF,GAEN,cAAClB,EAAD,CACJK,MAAOe,EACPlB,QAAS,kBAAM,EAAKmB,YAAYF,Q,kCAE5BG,GACR,IAAIC,EAAgBpB,KAAKM,MAAMM,UAAUS,QACrCC,EAAatB,KAAKM,MAAMC,OACxBgB,EAAcvB,KAAKM,MAAME,QACvBgB,EAAaxB,KAAKM,MAAMG,UAAUU,GAEnCC,EAAcD,KACfC,EAAcD,IAAK,EACnBnB,KAAKyB,SAASL,GACdM,QAAQC,IAAI,QAKZ3B,KAAK4B,SAASR,GACNS,OAAOC,QAAQ,0CAEnB9B,KAAK+B,QAEDT,EAQDF,EAAcG,IAAgBH,EAAcD,KAG/CG,IAAeE,EACfxB,KAAKgC,SAAS,CACVzB,OAAQ,KACRC,QAAS,KACTI,UAAWQ,KAGfpB,KAAKgC,SAAS,CACVzB,OAAQ,KACRC,QAAS,OAKbR,KAAKiC,WAAWV,EAAaJ,MAvBjCG,EAAaE,EACbD,EAAcJ,EACdnB,KAAKgC,SAAS,CACVzB,OAAQiB,EACRhB,QAASe,Q,+BA2BZH,GACLpB,KAAKgC,SAAS,CACVpB,UAAWQ,M,iCAMRc,EAAQC,GAAY,IAAD,OACtBC,EAASpC,KAAKM,MAAMM,UACxBwB,EAAOF,IAAU,EACjBE,EAAOD,IAAa,EACpBE,YAAW,WACP,EAAKL,SAAS,CACVzB,OAAQ,KACRC,QAAS,KACTI,UAAWwB,MAEhB,O,+BAKExB,GAEL,OADQA,EAAU0B,MAAK,SAAAC,GAAC,OAAU,IAANA,O,8BAI5BvC,KAAKgC,SAAS,CACVzB,OAAQ,KACRiC,OAAQ,KACRhC,QAAS,KACTC,UAAWC,EAAQd,EAAee,OAAOf,IACzCgB,UAAWC,MAAM,IAAIC,MAAK,O,+BAGxB,IAAD,OACL,OACI,sBAAKhB,UAAU,OAAf,UACI,2CAAQ,SACR,qBAAKA,UAAU,iBAAf,SACKE,KAAKM,MAAMG,UAAUgC,KAAI,SAACC,EAAM1B,GAC7B,OAAO,EAAK2B,WAAWD,EAAM1B,QAGrC,wBAAQlB,UAAU,QAAQC,QAAS,kBAAM,EAAKgC,SAA9C,0B,GA7HG5B,IAAMC,WAsIzB,SAASM,EAAQkC,GAEb,IADA,IAAIC,EAAUD,EACLzB,EAAI0B,EAAQC,OAAS,EAAG3B,EAAI,EAAGA,IAAK,CACzC,IAAI4B,EAAIC,KAAKC,MAAMD,KAAKE,UAAY/B,EAAI,IADC,EAEd,CAAC0B,EAAQE,GAAIF,EAAQ1B,IAA/C0B,EAAQ1B,GAFgC,KAE5B0B,EAAQE,GAFoB,KAI7C,OAAOF,EAOXM,IAASC,OACL,cAAC/C,EAAD,IACAgD,SAASC,eAAe,W","file":"static/js/main.8069bc08.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst cardArray_init = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n\r\n/**\r\n * @description 每張牌，component中最小單位\r\n */\r\nclass Card extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='card'\r\n                onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // 第一比對值\r\n            fstVal: null,\r\n            // 用來記錄第一個翻的牌位置，以便翻第二張牌時可以改前一張牌的狀態\r\n            pre_pos: null,\r\n            // 紀錄所有卡片背後所存的值\r\n            cardArray: shuffle(cardArray_init.concat(cardArray_init)),\r\n            // 一開始預設所有卡片都是蓋上的(蓋false翻true)\r\n            flipArray: Array(16).fill(false),\r\n        }\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} val 要塞的值\r\n     * @param {*} index 第幾個位置\r\n     */\r\n    renderCard(val, index) {\r\n        let showVal = 'Back';\r\n        if (this.state.flipArray[index]) {\r\n            showVal = val;\r\n        }\r\n        return (<Card\r\n            value={showVal}\r\n            onClick={() => this.handleClick(index)} />);\r\n    }\r\n    handleClick(i) {\r\n        let flipArray_tmp = this.state.flipArray.slice();\r\n        let fstVal_tmp = this.state.fstVal;\r\n        let pre_pos_tmp = this.state.pre_pos;\r\n        const currentVal = this.state.cardArray[i];\r\n        // 記錄每張牌是蓋上或翻開，如果翻過的就不做事\r\n        if (!flipArray_tmp[i]) {\r\n            flipArray_tmp[i] = true;\r\n            this.flipCard(flipArray_tmp);\r\n            console.log('open')\r\n        } else {\r\n            return;\r\n        }\r\n        // 如果全部都翻完了\r\n        if (this.isFinish(flipArray_tmp)) {\r\n            let a = window.confirm('厲害!! \\n 在一場?');\r\n            if (a) {\r\n                this.reset();\r\n            }\r\n        } else if (!fstVal_tmp) {\r\n            // 如果是第一次翻，要把位置記錄下來\r\n            fstVal_tmp = currentVal;\r\n            pre_pos_tmp = i;\r\n            this.setState({\r\n                fstVal: currentVal,\r\n                pre_pos: pre_pos_tmp,\r\n            });\r\n        } else if (flipArray_tmp[pre_pos_tmp] && flipArray_tmp[i]) {\r\n            //     // if both card are flipped\r\n            //     // 第一跟第二個值比對成功的話，要留在場上，反之則兩張都蓋起來\r\n            if (fstVal_tmp === currentVal) {\r\n                this.setState({\r\n                    fstVal: null,\r\n                    pre_pos: null,\r\n                    flipArray: flipArray_tmp\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    fstVal: null,\r\n                    pre_pos: null,\r\n                })\r\n                // 原本想在這直接改卡片狀態的array，但不知道為何會動到state裡的值，研究中...，都已經用tmp的值來改了說\r\n                // flipArray_tmp[pre_pos_tmp] = false;\r\n                // flipArray_tmp[i] = false;\r\n                this.unflipCard(pre_pos_tmp, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 將牌翻開\r\n     */\r\n    flipCard(flipArray_tmp) {\r\n        this.setState({\r\n            flipArray: flipArray_tmp,\r\n        })\r\n    }\r\n    /**\r\n * @description 將牌蓋上\r\n */\r\n    unflipCard(prePos, currenPos) {\r\n        let tmpArr = this.state.flipArray;\r\n        tmpArr[prePos] = false;\r\n        tmpArr[currenPos] = false;\r\n        setTimeout(() => {\r\n            this.setState({\r\n                fstVal: null,\r\n                pre_pos: null,\r\n                flipArray: tmpArr,\r\n            })\r\n        }, 500)\r\n    }\r\n    /**\r\n * @description 判斷遊戲是否結束，大家都翻開了\r\n */\r\n    isFinish(flipArray) {\r\n        let a = flipArray.some(e => e === false);\r\n        return !a\r\n    }\r\n    reset() {\r\n        this.setState({\r\n            fstVal: null,\r\n            secVal: null,\r\n            pre_pos: null,\r\n            cardArray: shuffle(cardArray_init.concat(cardArray_init)),\r\n            flipArray: Array(16).fill(false),\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='game'>\r\n                <h1 key='title'>MemoryGame</h1>\r\n                <div className='grid-container'>\r\n                    {this.state.cardArray.map((card, index) => {\r\n                        return this.renderCard(card, index)\r\n                    })}\r\n                </div>\r\n                <button className='reset' onClick={() => this.reset()}>Reset</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/**\r\n * @description 洗牌\r\n * @param {*} array \r\n */\r\nfunction shuffle(array) {\r\n    let arr_tmp = array;\r\n    for (let i = arr_tmp.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [arr_tmp[i], arr_tmp[j]] = [arr_tmp[j], arr_tmp[i]];\r\n    }\r\n    return arr_tmp;\r\n}\r\n\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}